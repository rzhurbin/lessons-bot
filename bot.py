import os
import re
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# ========= –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó ENV =========
BOT_TOKEN = os.getenv("BOT_TOKEN")              # —Ç–æ–∫–µ–Ω –∏–∑ BotFather
TEACHER_ID = int(os.getenv("TEACHER_ID", "0")) # —Ç–≤–æ–π Telegram ID
SHEET_ID = os.getenv("SHEET_ID")                # ID Google Sheets (–º–µ–∂–¥—É /d/ –∏ /edit)
GOOGLE_CREDS_PATH = os.getenv("GOOGLE_CREDS_PATH", "credentials.json")

# –∞–¥—Ä–µ—Å –≤–µ–±—Ö—É–∫–∞ (Render –¥–∞—Å—Ç https-–¥–æ–º–µ–Ω)
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")         # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret-path")
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

PORT = int(os.getenv("PORT", "10000"))  # Render —Å–∞–º –ø—Ä–æ–∫–∏–Ω–µ—Ç –ø–æ—Ä—Ç

# ========= –ü–†–û–í–ï–†–ö–ò =========
for var_name in ["BOT_TOKEN", "TEACHER_ID", "SHEET_ID", "WEBHOOK_URL"]:
    if not os.getenv(var_name):
        raise RuntimeError(f"ENV {var_name} is required")

# ========= GOOGLE SHEETS =========
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file(GOOGLE_CREDS_PATH, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open_by_key(SHEET_ID)
sheet = sh.sheet1

# ========= TELEGRAM =========
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ========= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@dp.message(Command("id"))
async def get_id(message: Message):
    await message.reply(f"–¢–≤–æ–π Telegram ID: {message.from_user.id}")

@dp.message(Command("stats"))
@dp.message(Command("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def stats(message: Message):
    if message.from_user.id != TEACHER_ID:
        await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
        return

    try:
        records = sheet.get_all_records()
    except Exception:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Google Sheets.")
        return

    if not records:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—á–µ–Ω–∏–∫–∞–º.")
        return

    header = f"{'–£—á–µ–Ω–∏–∫':25} | {'–ü—Ä–æ–π–¥–µ–Ω–æ':8} | {'–í—Å–µ–≥–æ':5} | {'–û—Å—Ç–∞–ª–æ—Å—å':8}"
    lines = [header, "-" * len(header)]

    for r in records:
        student = str(r.get("Student", ""))[:25]
        done = int(r.get("Done", 0) or 0)
        total = int(r.get("Total", 0) or 0)
        remain = max(total - done, 0)
        lines.append(f"{student:25} | {done:^8} | {total:^5} | {remain:^8}")

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–µ–Ω–∏–∫–∞–º:\n\n" + "\n".join(lines)
    await message.reply(f"<pre>{text}</pre>", parse_mode="HTML")

# ========= –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê =========
def update_progress(chat_id, student, done, total):
    try:
        records = sheet.get_all_records()
        for i, row in enumerate(records, start=2):  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if str(row.get("ChatID")) == str(chat_id):
                sheet.update_cell(i, 3, str(done))   # Done
                sheet.update_cell(i, 4, str(total))  # Total
                sheet.update_cell(i, 5, datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"))
                return
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        sheet.append_row([str(chat_id), student, str(done), str(total),
                          datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets:", e)
        raise

# ========= –•–≠–ù–î–õ–ï–† –ü–†–û–ì–†–ï–°–°–ê =========
@dp.message()
async def track_lessons(message: Message):
    if not message.text:
        return

    text = message.text.lower()
    match = re.search(r"—É—Ä–æ–∫\s+(\d+)\s+–∏–∑\s+(\d+)", text)
    if not match:
        return

    done, total = map(int, match.groups())
    chat_id = message.chat.id

    if message.chat.type in ("group", "supergroup", "channel"):
        student = message.chat.title or f"chat_{chat_id}"
    else:
        user = message.from_user
        student = f"{user.full_name} (@{user.username})" if user else f"chat_{chat_id}"

    try:
        update_progress(chat_id, student, done, total)
    except Exception:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets.")
        return

    if total - done == 1:
        try:
            await bot.send_message(
                TEACHER_ID,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É {student} –æ—Å—Ç–∞–ª–æ—Å—å 1 –∑–∞–Ω—è—Ç–∏–µ –∏–∑ {total} (—á–∞—Ç id {chat_id})."
            )
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", e)

    await message.reply(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {done} –∏–∑ {total}")

# ========= AIOHTTP + WEBHOOK =========
async def on_startup(app: web.Application):
    await bot.set_webhook(url=WEBHOOK_BASE + WEBHOOK_PATH, drop_pending_updates=True)
    print("Webhook set:", WEBHOOK_BASE + WEBHOOK_PATH)

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()

def build_app() -> web.Application:
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

    async def health(_):
        return web.Response(text="OK")
    app.router.add_get("/", health)

    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    web.run_app(build_app(), port=PORT)
